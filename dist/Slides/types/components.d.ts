/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IonxSlide {
    }
    interface IonxSlides {
        /**
          * Get the index of the active slide.
         */
        "getActiveIndex": () => Promise<number>;
        /**
          * Get the index of the previous slide.
         */
        "getPreviousIndex": () => Promise<number>;
        /**
          * Get the Swiper instance. Use this to access the full Swiper API. See https://idangero.us/swiper/api/ for all API options.
         */
        "getSwiper": () => Promise<any>;
        /**
          * Get whether or not the current slide is the first slide.
         */
        "isBeginning": () => Promise<boolean>;
        /**
          * Get whether or not the current slide is the last slide.
         */
        "isEnd": () => Promise<boolean>;
        /**
          * Get the total number of slides.
         */
        "length": () => Promise<number>;
        /**
          * Lock or unlock the ability to slide to the next slide.
          * @param lock If `true`, disable swiping to the next slide.
         */
        "lockSwipeToNext": (lock: boolean) => Promise<void>;
        /**
          * Lock or unlock the ability to slide to the previous slide.
          * @param lock If `true`, disable swiping to the previous slide.
         */
        "lockSwipeToPrev": (lock: boolean) => Promise<void>;
        /**
          * Lock or unlock the ability to slide to the next or previous slide.
          * @param lock If `true`, disable swiping to the next and previous slide.
         */
        "lockSwipes": (lock: boolean) => Promise<void>;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
         */
        "options": any;
        /**
          * If `true`, show the pagination.
         */
        "pager": boolean;
        /**
          * If `true`, show the scrollbar.
         */
        "scrollbar": boolean;
        /**
          * Transition to the next slide.
          * @param speed The transition duration (in ms).
          * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
         */
        "slideNext": (speed?: number, runCallbacks?: boolean) => Promise<void>;
        /**
          * Transition to the previous slide.
          * @param speed The transition duration (in ms).
          * @param runCallbacks If true, the transition will produce the [Transition/SlideChange][Start/End] transition events.
         */
        "slidePrev": (speed?: number, runCallbacks?: boolean) => Promise<void>;
        /**
          * Transition to the specified slide.
          * @param index The index of the slide to transition to.
          * @param speed The transition duration (in ms).
          * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
         */
        "slideTo": (index: number, speed?: number, runCallbacks?: boolean) => Promise<void>;
        /**
          * Start auto play.
         */
        "startAutoplay": () => Promise<void>;
        /**
          * Stop auto play.
         */
        "stopAutoplay": () => Promise<void>;
        /**
          * Update the underlying slider implementation. Call this if you've added or removed child slides.
         */
        "update": () => Promise<void>;
        /**
          * Force swiper to update its height (when autoHeight is enabled) for the duration equal to 'speed' parameter.
          * @param speed The transition duration (in ms).
         */
        "updateAutoHeight": (speed?: number) => Promise<void>;
    }
}
declare global {
    interface HTMLIonxSlideElement extends Components.IonxSlide, HTMLStencilElement {
    }
    var HTMLIonxSlideElement: {
        prototype: HTMLIonxSlideElement;
        new (): HTMLIonxSlideElement;
    };
    interface HTMLIonxSlidesElement extends Components.IonxSlides, HTMLStencilElement {
    }
    var HTMLIonxSlidesElement: {
        prototype: HTMLIonxSlidesElement;
        new (): HTMLIonxSlidesElement;
    };
    interface HTMLElementTagNameMap {
        "ionx-slide": HTMLIonxSlideElement;
        "ionx-slides": HTMLIonxSlidesElement;
    }
}
declare namespace LocalJSX {
    interface IonxSlide {
    }
    interface IonxSlides {
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Emitted after the active slide has changed.
         */
        "onIonSlideDidChange"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the user double taps on the slide's container.
         */
        "onIonSlideDoubleTap"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the slider is actively being moved.
         */
        "onIonSlideDrag"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the next slide has ended.
         */
        "onIonSlideNextEnd"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the next slide has started.
         */
        "onIonSlideNextStart"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the previous slide has ended.
         */
        "onIonSlidePrevEnd"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the previous slide has started.
         */
        "onIonSlidePrevStart"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the slider is at the last slide.
         */
        "onIonSlideReachEnd"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the slider is at its initial position.
         */
        "onIonSlideReachStart"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the user taps/clicks on the slide's container.
         */
        "onIonSlideTap"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the user releases the touch.
         */
        "onIonSlideTouchEnd"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the user first touches the slider.
         */
        "onIonSlideTouchStart"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the slide transition has ended.
         */
        "onIonSlideTransitionEnd"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the slide transition has started.
         */
        "onIonSlideTransitionStart"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted before the active slide has changed.
         */
        "onIonSlideWillChange"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted after Swiper initialization
         */
        "onIonSlidesDidLoad"?: (event: CustomEvent<void>) => void;
        /**
          * Options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
         */
        "options"?: any;
        /**
          * If `true`, show the pagination.
         */
        "pager"?: boolean;
        /**
          * If `true`, show the scrollbar.
         */
        "scrollbar"?: boolean;
    }
    interface IntrinsicElements {
        "ionx-slide": IonxSlide;
        "ionx-slides": IonxSlides;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ionx-slide": LocalJSX.IonxSlide & JSXBase.HTMLAttributes<HTMLIonxSlideElement>;
            "ionx-slides": LocalJSX.IonxSlides & JSXBase.HTMLAttributes<HTMLIonxSlidesElement>;
        }
    }
}
