/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ValueComparator } from "./ValueComparator";
import { SelectItem } from "./SelectItem";
import { LazyItemsFn } from "./LazyItemsFn";
import { SelectLazyGroupItem } from "./SelectGroupItem";
import { FunctionalComponent } from "@stencil/core";
import { StyleEventDetail } from "@ionic/core";
import { SelectValueItem } from "./SelectValueItem";
import { SelectDividerItem } from "./SelectDividerItem";
export namespace Components {
    interface IonxSelect {
        /**
          * Whether value should be always returned as array, no matter if multiple is set to true.
         */
        "alwaysArray": boolean;
        "checkValidator": (value: any, checked: boolean, otherCheckedValues: any[]) => any[];
        "comparator": ValueComparator;
        "disabled": boolean;
        "empty": boolean;
        "items": SelectItem[];
        "labelComponent"?: string | FunctionalComponent<{value: any, item?: SelectItem, label: string, index: number, readonly?: boolean}>;
        "labelFormatter"?: (value: any) => string;
        "lazyItems": LazyItemsFn | SelectLazyGroupItem;
        /**
          * If multiple value selection is allowed.
         */
        "multiple": boolean;
        /**
          * @deprecated
         */
        "options": SelectItem[];
        "overlay": "popover" | "modal";
        "overlayOptions": {whiteSpace?: "nowrap" | "normal", title?: string};
        "overlayTitle": string;
        "placeholder": string;
        "prefetch": boolean;
        "readonly": boolean;
        /**
          * A function, that will be used for testing if value passes search critieria. Default implementation checks lowercased label of value against lowercased searched text.
         */
        "searchTest": (query: string, value: any, label: string) => boolean;
        "separator"?: string;
        "setBlur": () => Promise<void>;
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * If multiple values selection can be sorted after selection.
         */
        "sortable": boolean;
        "value": any;
    }
    interface IonxSelectOverlay {
        "checkValidator": (value: any, checked: boolean, otherCheckedValues: any[]) => any[];
        "comparator": ValueComparator;
        "empty": boolean;
        "items": SelectItem[];
        "labelFormatter"?: (value: any) => string;
        "lazyItems": () => Promise<Array<SelectValueItem | SelectDividerItem>>;
        "multiple": boolean;
        "overlay": "modal" | "popover";
        "overlayTitle": string;
        "searchTest": (query: string, value: any, label: string) => boolean;
        "sortable": boolean;
        "values": any[];
    }
}
declare global {
    interface HTMLIonxSelectElement extends Components.IonxSelect, HTMLStencilElement {
    }
    var HTMLIonxSelectElement: {
        prototype: HTMLIonxSelectElement;
        new (): HTMLIonxSelectElement;
    };
    interface HTMLIonxSelectOverlayElement extends Components.IonxSelectOverlay, HTMLStencilElement {
    }
    var HTMLIonxSelectOverlayElement: {
        prototype: HTMLIonxSelectOverlayElement;
        new (): HTMLIonxSelectOverlayElement;
    };
    interface HTMLElementTagNameMap {
        "ionx-select": HTMLIonxSelectElement;
        "ionx-select-overlay": HTMLIonxSelectOverlayElement;
    }
}
declare namespace LocalJSX {
    interface IonxSelect {
        /**
          * Whether value should be always returned as array, no matter if multiple is set to true.
         */
        "alwaysArray"?: boolean;
        "checkValidator"?: (value: any, checked: boolean, otherCheckedValues: any[]) => any[];
        "comparator"?: ValueComparator;
        "disabled"?: boolean;
        "empty"?: boolean;
        "items"?: SelectItem[];
        "labelComponent"?: string | FunctionalComponent<{value: any, item?: SelectItem, label: string, index: number, readonly?: boolean}>;
        "labelFormatter"?: (value: any) => string;
        "lazyItems"?: LazyItemsFn | SelectLazyGroupItem;
        /**
          * If multiple value selection is allowed.
         */
        "multiple"?: boolean;
        "onIonChange"?: (event: CustomEvent<{value: any}>) => void;
        "onIonFocus"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the styles change.
         */
        "onIonStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * @deprecated
         */
        "options"?: SelectItem[];
        "overlay"?: "popover" | "modal";
        "overlayOptions"?: {whiteSpace?: "nowrap" | "normal", title?: string};
        "overlayTitle"?: string;
        "placeholder"?: string;
        "prefetch"?: boolean;
        "readonly"?: boolean;
        /**
          * A function, that will be used for testing if value passes search critieria. Default implementation checks lowercased label of value against lowercased searched text.
         */
        "searchTest"?: (query: string, value: any, label: string) => boolean;
        "separator"?: string;
        /**
          * If multiple values selection can be sorted after selection.
         */
        "sortable"?: boolean;
        "value"?: any;
    }
    interface IonxSelectOverlay {
        "checkValidator"?: (value: any, checked: boolean, otherCheckedValues: any[]) => any[];
        "comparator"?: ValueComparator;
        "empty"?: boolean;
        "items"?: SelectItem[];
        "labelFormatter"?: (value: any) => string;
        "lazyItems"?: () => Promise<Array<SelectValueItem | SelectDividerItem>>;
        "multiple"?: boolean;
        "overlay": "modal" | "popover";
        "overlayTitle"?: string;
        "searchTest"?: (query: string, value: any, label: string) => boolean;
        "sortable"?: boolean;
        "values"?: any[];
    }
    interface IntrinsicElements {
        "ionx-select": IonxSelect;
        "ionx-select-overlay": IonxSelectOverlay;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ionx-select": LocalJSX.IonxSelect & JSXBase.HTMLAttributes<HTMLIonxSelectElement>;
            "ionx-select-overlay": LocalJSX.IonxSelectOverlay & JSXBase.HTMLAttributes<HTMLIonxSelectOverlayElement>;
        }
    }
}
