/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DateTimeInputType } from "./DateTimeInputType";
import { DateTimeInputValue } from "./DateTimeInputValue";
import { StyleEventDetail } from "@ionic/core/components";
export namespace Components {
    interface IonxDateTimeInput {
        /**
          * @inheritDoc
         */
        "clearButtonIcon": string;
        /**
          * @inheritDoc
         */
        "clearButtonVisible": boolean;
        "clearValue": () => Promise<void>;
        /**
          * Timezone, that will be set, when new value is picked from picker.
          * @inheritDoc
         */
        "defaultTimeZone": string;
        /**
          * @inheritDoc
         */
        "disabled": boolean;
        /**
          * @inheritDoc
         */
        "formatOptions": Intl.DateTimeFormatOptions;
        /**
          * The value, that will be initially set when user opens date/time picker.
          * @inheritDoc
         */
        "initialValue"?: DateTimeInputValue;
        "open": () => Promise<void>;
        /**
          * @inheritDoc
         */
        "placeholder": string;
        /**
          * @inheritDoc
         */
        "readonly": boolean;
        "setBlur": () => Promise<void>;
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Jeżeli wartością może być date-time to czy możliwość wyboru strefy czasowej jest zablokowana. Jeżeli true to strefa czasowa będzie taka jak określona w {@link value}, {@link initialValue} lub {@link defaultTimeZone}.
          * @inheritDoc
         */
        "timeZoneDisabled": boolean;
        /**
          * If time zone must be chosen, by default true.
          * @inheritDoc
         */
        "timeZoneRequired": boolean;
        /**
          * @inheritDoc
         */
        "type": DateTimeInputType;
        /**
          * @inheritDoc
         */
        "value": DateTimeInputValue;
    }
    interface IonxDateTimeInputOverlay {
        "timeZoneDisabled": boolean;
        "timeZoneRequired": boolean;
        "type": DateTimeInputType;
        "value": DateTimeInputValue;
    }
}
declare global {
    interface HTMLIonxDateTimeInputElement extends Components.IonxDateTimeInput, HTMLStencilElement {
    }
    var HTMLIonxDateTimeInputElement: {
        prototype: HTMLIonxDateTimeInputElement;
        new (): HTMLIonxDateTimeInputElement;
    };
    interface HTMLIonxDateTimeInputOverlayElement extends Components.IonxDateTimeInputOverlay, HTMLStencilElement {
    }
    var HTMLIonxDateTimeInputOverlayElement: {
        prototype: HTMLIonxDateTimeInputOverlayElement;
        new (): HTMLIonxDateTimeInputOverlayElement;
    };
    interface HTMLElementTagNameMap {
        "ionx-date-time-input": HTMLIonxDateTimeInputElement;
        "ionx-date-time-input-overlay": HTMLIonxDateTimeInputOverlayElement;
    }
}
declare namespace LocalJSX {
    interface IonxDateTimeInput {
        /**
          * @inheritDoc
         */
        "clearButtonIcon"?: string;
        /**
          * @inheritDoc
         */
        "clearButtonVisible"?: boolean;
        /**
          * Timezone, that will be set, when new value is picked from picker.
          * @inheritDoc
         */
        "defaultTimeZone"?: string;
        /**
          * @inheritDoc
         */
        "disabled"?: boolean;
        /**
          * @inheritDoc
         */
        "formatOptions"?: Intl.DateTimeFormatOptions;
        /**
          * The value, that will be initially set when user opens date/time picker.
          * @inheritDoc
         */
        "initialValue"?: DateTimeInputValue;
        "onIonChange"?: (event: CustomEvent<{value: DateTimeInputValue}>) => void;
        "onIonFocus"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the styles change.
         */
        "onIonStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * @inheritDoc
         */
        "placeholder"?: string;
        /**
          * @inheritDoc
         */
        "readonly"?: boolean;
        /**
          * Jeżeli wartością może być date-time to czy możliwość wyboru strefy czasowej jest zablokowana. Jeżeli true to strefa czasowa będzie taka jak określona w {@link value}, {@link initialValue} lub {@link defaultTimeZone}.
          * @inheritDoc
         */
        "timeZoneDisabled"?: boolean;
        /**
          * If time zone must be chosen, by default true.
          * @inheritDoc
         */
        "timeZoneRequired"?: boolean;
        /**
          * @inheritDoc
         */
        "type": DateTimeInputType;
        /**
          * @inheritDoc
         */
        "value"?: DateTimeInputValue;
    }
    interface IonxDateTimeInputOverlay {
        "timeZoneDisabled"?: boolean;
        "timeZoneRequired"?: boolean;
        "type"?: DateTimeInputType;
        "value"?: DateTimeInputValue;
    }
    interface IntrinsicElements {
        "ionx-date-time-input": IonxDateTimeInput;
        "ionx-date-time-input-overlay": IonxDateTimeInputOverlay;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ionx-date-time-input": LocalJSX.IonxDateTimeInput & JSXBase.HTMLAttributes<HTMLIonxDateTimeInputElement>;
            "ionx-date-time-input-overlay": LocalJSX.IonxDateTimeInputOverlay & JSXBase.HTMLAttributes<HTMLIonxDateTimeInputOverlayElement>;
        }
    }
}
