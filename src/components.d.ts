/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AnimationBuilder, OverlayEventDetail, RouterDirection, RouterEventDetail, StyleEventDetail, TextFieldTypes } from "@ionic/core";
import { HtmlString } from "@co.mmons/js-utils/core";
import { DialogButton } from "./components/Dialog/DialogButton";
import { FormController } from "./components/forms/FormController";
import { FormControlAttachOptions } from "./components/forms/FormControlAttachOptions";
import { FormControllerValidateOptions } from "./components/forms/FormControllerPublicApi";
import { FormControlState } from "./components/forms/FormControlState";
import { FormValidationError } from "./components/forms/FormValidationError";
import { MessageRef } from "@co.mmons/js-intl";
import { TooltipErrorPresenterImpl } from "./components/forms/TooltipErrorPresenter/TooltipErrorPresenterImpl";
import { TooltipErrorPresenterOptions } from "./components/forms/TooltipErrorPresenter/TooltipErrorPresenterOptions";
import { ExtendedItemElement } from "./components/MasonryGrid/ExtendedItemElement";
import { ValueComparator } from "./components/Select/ValueComparator";
import { SelectOption } from "./components/Select/SelectOption";
export namespace Components {
    interface IonRouter {
        /**
          * Go back to previous page in the window.history.
         */
        "back": () => Promise<void>;
        "canTransition": () => Promise<string | boolean>;
        "navChanged": (direction: RouterDirection) => Promise<boolean>;
        "printDebug": () => Promise<void>;
        /**
          * Navigate to the specified URL.
          * @param url The url to navigate to.
          * @param direction The direction of the animation. Defaults to `"forward"`.
         */
        "push": (url: string, direction?: RouterDirection, animation?: AnimationBuilder) => Promise<boolean>;
        /**
          * By default `ion-router` will match the routes at the root path ("/"). That can be changed when
         */
        "root": string;
        /**
          * The router can work in two "modes": - With hash: `/index.html#/path/to/page` - Without hash: `/path/to/page`  Using one or another might depend in the requirements of your app and/or where it"s deployed.  Usually "hash-less" navigation works better for SEO and it"s more user friendly too, but it might requires additional server-side configuration in order to properly work.  On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.  By default, this property is `true`, change to `false` to allow hash-less URLs.
         */
        "useHash": boolean;
    }
    interface IonxDialog {
        /**
          * @inheritDoc
         */
        "buttons"?: DialogButton[];
        /**
          * Name of the tag, that should be displayed inside....
          * @inheritDoc
         */
        "component"?: string;
        /**
          * @inheritDoc
         */
        "componentProps"?: {[prop: string]: any};
        /**
          * @inheritDoc
         */
        "header"?: string;
        /**
          * @inheritDoc
         */
        "message"?: string | HtmlString;
        /**
          * @inheritDoc
         */
        "messageComponent"?: string;
        /**
          * @inheritDoc
         */
        "messageComponentProps"?: {[prop: string]: any};
        "onDidDismiss": () => Promise<OverlayEventDetail<any>>;
        /**
          * A promise resolved when dialog was fully presented.
         */
        "onDidEnter": () => Promise<true>;
        "onWillDismiss": () => Promise<OverlayEventDetail<any>>;
        /**
          * @inheritDoc
         */
        "subheader"?: string;
    }
    interface IonxDialogButtons {
        "buttons": DialogButton[];
    }
    interface IonxDialogContent {
    }
    interface IonxDialogHeaders {
        "header"?: string;
        "subheader"?: string;
    }
    interface IonxDialogMessage {
        "message"?: string | HtmlString;
    }
    interface IonxExpandingSearchbar {
        "expand": () => Promise<void>;
        "expanded": boolean;
    }
    interface IonxExpandingSearchbarParent {
    }
    interface IonxFormController {
        "attach": (element: HTMLElement, name: string, options?: FormControlAttachOptions) => Promise<void>;
        "controller": FormController;
        /**
          * If controller should be disconnected when component is disconnected from the DOM. By default is true, but you can set to false when you expect that form controller component can be connected/disconnected to DOM multiple times (e.g. when conditional rendering takes place).
         */
        "disconnect"?: boolean;
        "validate": (options?: FormControllerValidateOptions) => Promise<boolean>;
    }
    interface IonxFormItem {
        "control"?: FormControlState;
        "error"?: string | FormValidationError | MessageRef | Error;
        /**
          * This attributes determines the background and border color of the form item. By default, items have a clear background and no border.
         */
        "fill": "clear" | "solid" | "outline";
        "hint": string;
    }
    interface IonxFormTooltipErrorPresenter {
        "instance"?: TooltipErrorPresenterImpl | false;
        "options"?: TooltipErrorPresenterOptions;
    }
    interface IonxLazyLoad {
    }
    interface IonxLoading {
        "backdropVisible"?: boolean;
        "color"?: string;
        "dismiss": () => Promise<void>;
        /**
          * If loading element should fill available space and center content both h and v.
         */
        "fill"?: boolean;
        "header"?: string;
        "message"?: string;
        "progressBuffer"?: number;
        "progressMessage"?: string;
        "progressPercent"?: number;
        "progressType"?: "determinate" | "indeterminate";
        "progressValue"?: number;
        /**
          * The type of loader.
          * @inheritDoc
         */
        "type": "spinner" | "progress";
    }
    interface IonxMasonryGrid {
        "layout": (options?: { force?: boolean; trigger?: "onresize"; }) => Promise<void>;
        "markItemAsDirty": (item: HTMLElement) => Promise<void>;
        "singleColumn"?: boolean;
    }
    interface IonxSelect {
        /**
          * Whether value should be always returned as array, no matter if multiple is set to true.
         */
        "alwaysArray": boolean;
        "checkValidator": (value: any, checked: boolean, otherCheckedValues: any[]) => any[];
        "comparator": ValueComparator;
        "disabled": boolean;
        "empty": boolean;
        "labelComponent"?: string;
        "labelFormatter"?: (value: any) => string;
        "lazyOptions": () => Promise<SelectOption[]>;
        /**
          * If multiple value selection is allowed.
         */
        "multiple": boolean;
        "options": SelectOption[];
        /**
          * If multiple values selection can be ordered after selection.
         */
        "orderable": boolean;
        "overlay": "popover" | "modal";
        "overlayOptions": { whiteSpace?: "nowrap" | "normal", title?: string };
        "overlayTitle": string;
        "placeholder": string;
        "readonly": boolean;
        /**
          * A function, that will be used for testing if value passes search critieria. Default implementation checks lowercased label of value against lowercased searched text.
         */
        "searchTest": (query: string, value: any, label: string) => boolean;
        "separator"?: string;
        "value": any;
    }
    interface IonxSelectOrderable {
        "enabled": boolean;
        "values": any[];
    }
    interface IonxSelectOverlay {
        "options": SelectOption[];
        "overlay": "modal" | "popover";
        "overlayTitle": string;
        "values": any[];
    }
    interface IonxTagsInput {
        "canBackspaceRemove": boolean;
        "canEnterAdd": boolean;
        "hideRemove": boolean;
        "maxTags": number;
        "placeholder": string;
        "readonly": boolean;
        "required"?: boolean;
        "separator": string;
        "sortFn": (a: string, b: string) => number;
        "sortable": boolean;
        "type": TextFieldTypes;
        "unique": boolean;
        "value": string[];
        "verifyFn": (tagSrt: string) => boolean;
    }
    interface IonxTestDialog {
    }
    interface IonxTestDialogContent {
    }
    interface IonxTestDialogMessage {
        "dialogValue": () => Promise<string>;
    }
    interface IonxTestExpandingSearchbar {
    }
    interface IonxTestForm {
    }
    interface IonxTestHome {
    }
    interface IonxTestLazyLoad {
    }
    interface IonxTestLoading {
    }
    interface IonxTestMasonryGrid {
    }
    interface IonxTestRoot {
    }
    interface IonxTestSelect {
    }
    interface IonxTestTagsInput {
    }
    interface IonxToggleLabels {
        "off": string;
        "on": string;
    }
}
declare global {
    interface HTMLIonRouterElement extends Components.IonRouter, HTMLStencilElement {
    }
    var HTMLIonRouterElement: {
        prototype: HTMLIonRouterElement;
        new (): HTMLIonRouterElement;
    };
    interface HTMLIonxDialogElement extends Components.IonxDialog, HTMLStencilElement {
    }
    var HTMLIonxDialogElement: {
        prototype: HTMLIonxDialogElement;
        new (): HTMLIonxDialogElement;
    };
    interface HTMLIonxDialogButtonsElement extends Components.IonxDialogButtons, HTMLStencilElement {
    }
    var HTMLIonxDialogButtonsElement: {
        prototype: HTMLIonxDialogButtonsElement;
        new (): HTMLIonxDialogButtonsElement;
    };
    interface HTMLIonxDialogContentElement extends Components.IonxDialogContent, HTMLStencilElement {
    }
    var HTMLIonxDialogContentElement: {
        prototype: HTMLIonxDialogContentElement;
        new (): HTMLIonxDialogContentElement;
    };
    interface HTMLIonxDialogHeadersElement extends Components.IonxDialogHeaders, HTMLStencilElement {
    }
    var HTMLIonxDialogHeadersElement: {
        prototype: HTMLIonxDialogHeadersElement;
        new (): HTMLIonxDialogHeadersElement;
    };
    interface HTMLIonxDialogMessageElement extends Components.IonxDialogMessage, HTMLStencilElement {
    }
    var HTMLIonxDialogMessageElement: {
        prototype: HTMLIonxDialogMessageElement;
        new (): HTMLIonxDialogMessageElement;
    };
    interface HTMLIonxExpandingSearchbarElement extends Components.IonxExpandingSearchbar, HTMLStencilElement {
    }
    var HTMLIonxExpandingSearchbarElement: {
        prototype: HTMLIonxExpandingSearchbarElement;
        new (): HTMLIonxExpandingSearchbarElement;
    };
    interface HTMLIonxExpandingSearchbarParentElement extends Components.IonxExpandingSearchbarParent, HTMLStencilElement {
    }
    var HTMLIonxExpandingSearchbarParentElement: {
        prototype: HTMLIonxExpandingSearchbarParentElement;
        new (): HTMLIonxExpandingSearchbarParentElement;
    };
    interface HTMLIonxFormControllerElement extends Components.IonxFormController, HTMLStencilElement {
    }
    var HTMLIonxFormControllerElement: {
        prototype: HTMLIonxFormControllerElement;
        new (): HTMLIonxFormControllerElement;
    };
    interface HTMLIonxFormItemElement extends Components.IonxFormItem, HTMLStencilElement {
    }
    var HTMLIonxFormItemElement: {
        prototype: HTMLIonxFormItemElement;
        new (): HTMLIonxFormItemElement;
    };
    interface HTMLIonxFormTooltipErrorPresenterElement extends Components.IonxFormTooltipErrorPresenter, HTMLStencilElement {
    }
    var HTMLIonxFormTooltipErrorPresenterElement: {
        prototype: HTMLIonxFormTooltipErrorPresenterElement;
        new (): HTMLIonxFormTooltipErrorPresenterElement;
    };
    interface HTMLIonxLazyLoadElement extends Components.IonxLazyLoad, HTMLStencilElement {
    }
    var HTMLIonxLazyLoadElement: {
        prototype: HTMLIonxLazyLoadElement;
        new (): HTMLIonxLazyLoadElement;
    };
    interface HTMLIonxLoadingElement extends Components.IonxLoading, HTMLStencilElement {
    }
    var HTMLIonxLoadingElement: {
        prototype: HTMLIonxLoadingElement;
        new (): HTMLIonxLoadingElement;
    };
    interface HTMLIonxMasonryGridElement extends Components.IonxMasonryGrid, HTMLStencilElement {
    }
    var HTMLIonxMasonryGridElement: {
        prototype: HTMLIonxMasonryGridElement;
        new (): HTMLIonxMasonryGridElement;
    };
    interface HTMLIonxSelectElement extends Components.IonxSelect, HTMLStencilElement {
    }
    var HTMLIonxSelectElement: {
        prototype: HTMLIonxSelectElement;
        new (): HTMLIonxSelectElement;
    };
    interface HTMLIonxSelectOrderableElement extends Components.IonxSelectOrderable, HTMLStencilElement {
    }
    var HTMLIonxSelectOrderableElement: {
        prototype: HTMLIonxSelectOrderableElement;
        new (): HTMLIonxSelectOrderableElement;
    };
    interface HTMLIonxSelectOverlayElement extends Components.IonxSelectOverlay, HTMLStencilElement {
    }
    var HTMLIonxSelectOverlayElement: {
        prototype: HTMLIonxSelectOverlayElement;
        new (): HTMLIonxSelectOverlayElement;
    };
    interface HTMLIonxTagsInputElement extends Components.IonxTagsInput, HTMLStencilElement {
    }
    var HTMLIonxTagsInputElement: {
        prototype: HTMLIonxTagsInputElement;
        new (): HTMLIonxTagsInputElement;
    };
    interface HTMLIonxTestDialogElement extends Components.IonxTestDialog, HTMLStencilElement {
    }
    var HTMLIonxTestDialogElement: {
        prototype: HTMLIonxTestDialogElement;
        new (): HTMLIonxTestDialogElement;
    };
    interface HTMLIonxTestDialogContentElement extends Components.IonxTestDialogContent, HTMLStencilElement {
    }
    var HTMLIonxTestDialogContentElement: {
        prototype: HTMLIonxTestDialogContentElement;
        new (): HTMLIonxTestDialogContentElement;
    };
    interface HTMLIonxTestDialogMessageElement extends Components.IonxTestDialogMessage, HTMLStencilElement {
    }
    var HTMLIonxTestDialogMessageElement: {
        prototype: HTMLIonxTestDialogMessageElement;
        new (): HTMLIonxTestDialogMessageElement;
    };
    interface HTMLIonxTestExpandingSearchbarElement extends Components.IonxTestExpandingSearchbar, HTMLStencilElement {
    }
    var HTMLIonxTestExpandingSearchbarElement: {
        prototype: HTMLIonxTestExpandingSearchbarElement;
        new (): HTMLIonxTestExpandingSearchbarElement;
    };
    interface HTMLIonxTestFormElement extends Components.IonxTestForm, HTMLStencilElement {
    }
    var HTMLIonxTestFormElement: {
        prototype: HTMLIonxTestFormElement;
        new (): HTMLIonxTestFormElement;
    };
    interface HTMLIonxTestHomeElement extends Components.IonxTestHome, HTMLStencilElement {
    }
    var HTMLIonxTestHomeElement: {
        prototype: HTMLIonxTestHomeElement;
        new (): HTMLIonxTestHomeElement;
    };
    interface HTMLIonxTestLazyLoadElement extends Components.IonxTestLazyLoad, HTMLStencilElement {
    }
    var HTMLIonxTestLazyLoadElement: {
        prototype: HTMLIonxTestLazyLoadElement;
        new (): HTMLIonxTestLazyLoadElement;
    };
    interface HTMLIonxTestLoadingElement extends Components.IonxTestLoading, HTMLStencilElement {
    }
    var HTMLIonxTestLoadingElement: {
        prototype: HTMLIonxTestLoadingElement;
        new (): HTMLIonxTestLoadingElement;
    };
    interface HTMLIonxTestMasonryGridElement extends Components.IonxTestMasonryGrid, HTMLStencilElement {
    }
    var HTMLIonxTestMasonryGridElement: {
        prototype: HTMLIonxTestMasonryGridElement;
        new (): HTMLIonxTestMasonryGridElement;
    };
    interface HTMLIonxTestRootElement extends Components.IonxTestRoot, HTMLStencilElement {
    }
    var HTMLIonxTestRootElement: {
        prototype: HTMLIonxTestRootElement;
        new (): HTMLIonxTestRootElement;
    };
    interface HTMLIonxTestSelectElement extends Components.IonxTestSelect, HTMLStencilElement {
    }
    var HTMLIonxTestSelectElement: {
        prototype: HTMLIonxTestSelectElement;
        new (): HTMLIonxTestSelectElement;
    };
    interface HTMLIonxTestTagsInputElement extends Components.IonxTestTagsInput, HTMLStencilElement {
    }
    var HTMLIonxTestTagsInputElement: {
        prototype: HTMLIonxTestTagsInputElement;
        new (): HTMLIonxTestTagsInputElement;
    };
    interface HTMLIonxToggleLabelsElement extends Components.IonxToggleLabels, HTMLStencilElement {
    }
    var HTMLIonxToggleLabelsElement: {
        prototype: HTMLIonxToggleLabelsElement;
        new (): HTMLIonxToggleLabelsElement;
    };
    interface HTMLElementTagNameMap {
        "ion-router": HTMLIonRouterElement;
        "ionx-dialog": HTMLIonxDialogElement;
        "ionx-dialog-buttons": HTMLIonxDialogButtonsElement;
        "ionx-dialog-content": HTMLIonxDialogContentElement;
        "ionx-dialog-headers": HTMLIonxDialogHeadersElement;
        "ionx-dialog-message": HTMLIonxDialogMessageElement;
        "ionx-expanding-searchbar": HTMLIonxExpandingSearchbarElement;
        "ionx-expanding-searchbar-parent": HTMLIonxExpandingSearchbarParentElement;
        "ionx-form-controller": HTMLIonxFormControllerElement;
        "ionx-form-item": HTMLIonxFormItemElement;
        "ionx-form-tooltip-error-presenter": HTMLIonxFormTooltipErrorPresenterElement;
        "ionx-lazy-load": HTMLIonxLazyLoadElement;
        "ionx-loading": HTMLIonxLoadingElement;
        "ionx-masonry-grid": HTMLIonxMasonryGridElement;
        "ionx-select": HTMLIonxSelectElement;
        "ionx-select-orderable": HTMLIonxSelectOrderableElement;
        "ionx-select-overlay": HTMLIonxSelectOverlayElement;
        "ionx-tags-input": HTMLIonxTagsInputElement;
        "ionx-test-dialog": HTMLIonxTestDialogElement;
        "ionx-test-dialog-content": HTMLIonxTestDialogContentElement;
        "ionx-test-dialog-message": HTMLIonxTestDialogMessageElement;
        "ionx-test-expanding-searchbar": HTMLIonxTestExpandingSearchbarElement;
        "ionx-test-form": HTMLIonxTestFormElement;
        "ionx-test-home": HTMLIonxTestHomeElement;
        "ionx-test-lazy-load": HTMLIonxTestLazyLoadElement;
        "ionx-test-loading": HTMLIonxTestLoadingElement;
        "ionx-test-masonry-grid": HTMLIonxTestMasonryGridElement;
        "ionx-test-root": HTMLIonxTestRootElement;
        "ionx-test-select": HTMLIonxTestSelectElement;
        "ionx-test-tags-input": HTMLIonxTestTagsInputElement;
        "ionx-toggle-labels": HTMLIonxToggleLabelsElement;
    }
}
declare namespace LocalJSX {
    interface IonRouter {
        /**
          * Emitted when the route had changed
         */
        "onIonRouteDidChange"?: (event: CustomEvent<RouterEventDetail>) => void;
        /**
          * Event emitted when the route is about to change
         */
        "onIonRouteWillChange"?: (event: CustomEvent<RouterEventDetail>) => void;
        /**
          * By default `ion-router` will match the routes at the root path ("/"). That can be changed when
         */
        "root"?: string;
        /**
          * The router can work in two "modes": - With hash: `/index.html#/path/to/page` - Without hash: `/path/to/page`  Using one or another might depend in the requirements of your app and/or where it"s deployed.  Usually "hash-less" navigation works better for SEO and it"s more user friendly too, but it might requires additional server-side configuration in order to properly work.  On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.  By default, this property is `true`, change to `false` to allow hash-less URLs.
         */
        "useHash"?: boolean;
    }
    interface IonxDialog {
        /**
          * @inheritDoc
         */
        "buttons"?: DialogButton[];
        /**
          * Name of the tag, that should be displayed inside....
          * @inheritDoc
         */
        "component"?: string;
        /**
          * @inheritDoc
         */
        "componentProps"?: {[prop: string]: any};
        /**
          * @inheritDoc
         */
        "header"?: string;
        /**
          * @inheritDoc
         */
        "message"?: string | HtmlString;
        /**
          * @inheritDoc
         */
        "messageComponent"?: string;
        /**
          * @inheritDoc
         */
        "messageComponentProps"?: {[prop: string]: any};
        /**
          * @inheritDoc
         */
        "subheader"?: string;
    }
    interface IonxDialogButtons {
        "buttons": DialogButton[];
    }
    interface IonxDialogContent {
    }
    interface IonxDialogHeaders {
        "header"?: string;
        "subheader"?: string;
    }
    interface IonxDialogMessage {
        "message"?: string | HtmlString;
    }
    interface IonxExpandingSearchbar {
        "expanded"?: boolean;
    }
    interface IonxExpandingSearchbarParent {
    }
    interface IonxFormController {
        "controller": FormController;
        /**
          * If controller should be disconnected when component is disconnected from the DOM. By default is true, but you can set to false when you expect that form controller component can be connected/disconnected to DOM multiple times (e.g. when conditional rendering takes place).
         */
        "disconnect"?: boolean;
    }
    interface IonxFormItem {
        "control"?: FormControlState;
        "error"?: string | FormValidationError | MessageRef | Error;
        /**
          * This attributes determines the background and border color of the form item. By default, items have a clear background and no border.
         */
        "fill"?: "clear" | "solid" | "outline";
        "hint"?: string;
    }
    interface IonxFormTooltipErrorPresenter {
        "instance"?: TooltipErrorPresenterImpl | false;
        "options"?: TooltipErrorPresenterOptions;
    }
    interface IonxLazyLoad {
    }
    interface IonxLoading {
        "backdropVisible"?: boolean;
        "color"?: string;
        /**
          * If loading element should fill available space and center content both h and v.
         */
        "fill"?: boolean;
        "header"?: string;
        "message"?: string;
        "progressBuffer"?: number;
        "progressMessage"?: string;
        "progressPercent"?: number;
        "progressType"?: "determinate" | "indeterminate";
        "progressValue"?: number;
        /**
          * The type of loader.
          * @inheritDoc
         */
        "type"?: "spinner" | "progress";
    }
    interface IonxMasonryGrid {
        "singleColumn"?: boolean;
    }
    interface IonxSelect {
        /**
          * Whether value should be always returned as array, no matter if multiple is set to true.
         */
        "alwaysArray"?: boolean;
        "checkValidator"?: (value: any, checked: boolean, otherCheckedValues: any[]) => any[];
        "comparator"?: ValueComparator;
        "disabled"?: boolean;
        "empty"?: boolean;
        "labelComponent"?: string;
        "labelFormatter"?: (value: any) => string;
        "lazyOptions"?: () => Promise<SelectOption[]>;
        /**
          * If multiple value selection is allowed.
         */
        "multiple"?: boolean;
        "onIonChange"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the styles change.
         */
        "onIonStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        "options"?: SelectOption[];
        /**
          * If multiple values selection can be ordered after selection.
         */
        "orderable"?: boolean;
        "overlay"?: "popover" | "modal";
        "overlayOptions"?: { whiteSpace?: "nowrap" | "normal", title?: string };
        "overlayTitle"?: string;
        "placeholder"?: string;
        "readonly"?: boolean;
        /**
          * A function, that will be used for testing if value passes search critieria. Default implementation checks lowercased label of value against lowercased searched text.
         */
        "searchTest"?: (query: string, value: any, label: string) => boolean;
        "separator"?: string;
        "value"?: any;
    }
    interface IonxSelectOrderable {
        "enabled"?: boolean;
        "onOrderChanged"?: (event: CustomEvent<any[]>) => void;
        "values"?: any[];
    }
    interface IonxSelectOverlay {
        "options"?: SelectOption[];
        "overlay": "modal" | "popover";
        "overlayTitle"?: string;
        "values"?: any[];
    }
    interface IonxTagsInput {
        "canBackspaceRemove"?: boolean;
        "canEnterAdd"?: boolean;
        "hideRemove"?: boolean;
        "maxTags"?: number;
        "onIonxChange"?: (event: CustomEvent<string[]>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "separator"?: string;
        "sortFn"?: (a: string, b: string) => number;
        "sortable"?: boolean;
        "type"?: TextFieldTypes;
        "unique"?: boolean;
        "value"?: string[];
        "verifyFn"?: (tagSrt: string) => boolean;
    }
    interface IonxTestDialog {
    }
    interface IonxTestDialogContent {
    }
    interface IonxTestDialogMessage {
    }
    interface IonxTestExpandingSearchbar {
    }
    interface IonxTestForm {
    }
    interface IonxTestHome {
    }
    interface IonxTestLazyLoad {
    }
    interface IonxTestLoading {
    }
    interface IonxTestMasonryGrid {
    }
    interface IonxTestRoot {
    }
    interface IonxTestSelect {
    }
    interface IonxTestTagsInput {
    }
    interface IonxToggleLabels {
        "off"?: string;
        "on"?: string;
    }
    interface IntrinsicElements {
        "ion-router": IonRouter;
        "ionx-dialog": IonxDialog;
        "ionx-dialog-buttons": IonxDialogButtons;
        "ionx-dialog-content": IonxDialogContent;
        "ionx-dialog-headers": IonxDialogHeaders;
        "ionx-dialog-message": IonxDialogMessage;
        "ionx-expanding-searchbar": IonxExpandingSearchbar;
        "ionx-expanding-searchbar-parent": IonxExpandingSearchbarParent;
        "ionx-form-controller": IonxFormController;
        "ionx-form-item": IonxFormItem;
        "ionx-form-tooltip-error-presenter": IonxFormTooltipErrorPresenter;
        "ionx-lazy-load": IonxLazyLoad;
        "ionx-loading": IonxLoading;
        "ionx-masonry-grid": IonxMasonryGrid;
        "ionx-select": IonxSelect;
        "ionx-select-orderable": IonxSelectOrderable;
        "ionx-select-overlay": IonxSelectOverlay;
        "ionx-tags-input": IonxTagsInput;
        "ionx-test-dialog": IonxTestDialog;
        "ionx-test-dialog-content": IonxTestDialogContent;
        "ionx-test-dialog-message": IonxTestDialogMessage;
        "ionx-test-expanding-searchbar": IonxTestExpandingSearchbar;
        "ionx-test-form": IonxTestForm;
        "ionx-test-home": IonxTestHome;
        "ionx-test-lazy-load": IonxTestLazyLoad;
        "ionx-test-loading": IonxTestLoading;
        "ionx-test-masonry-grid": IonxTestMasonryGrid;
        "ionx-test-root": IonxTestRoot;
        "ionx-test-select": IonxTestSelect;
        "ionx-test-tags-input": IonxTestTagsInput;
        "ionx-toggle-labels": IonxToggleLabels;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ion-router": LocalJSX.IonRouter & JSXBase.HTMLAttributes<HTMLIonRouterElement>;
            "ionx-dialog": LocalJSX.IonxDialog & JSXBase.HTMLAttributes<HTMLIonxDialogElement>;
            "ionx-dialog-buttons": LocalJSX.IonxDialogButtons & JSXBase.HTMLAttributes<HTMLIonxDialogButtonsElement>;
            "ionx-dialog-content": LocalJSX.IonxDialogContent & JSXBase.HTMLAttributes<HTMLIonxDialogContentElement>;
            "ionx-dialog-headers": LocalJSX.IonxDialogHeaders & JSXBase.HTMLAttributes<HTMLIonxDialogHeadersElement>;
            "ionx-dialog-message": LocalJSX.IonxDialogMessage & JSXBase.HTMLAttributes<HTMLIonxDialogMessageElement>;
            "ionx-expanding-searchbar": LocalJSX.IonxExpandingSearchbar & JSXBase.HTMLAttributes<HTMLIonxExpandingSearchbarElement>;
            "ionx-expanding-searchbar-parent": LocalJSX.IonxExpandingSearchbarParent & JSXBase.HTMLAttributes<HTMLIonxExpandingSearchbarParentElement>;
            "ionx-form-controller": LocalJSX.IonxFormController & JSXBase.HTMLAttributes<HTMLIonxFormControllerElement>;
            "ionx-form-item": LocalJSX.IonxFormItem & JSXBase.HTMLAttributes<HTMLIonxFormItemElement>;
            "ionx-form-tooltip-error-presenter": LocalJSX.IonxFormTooltipErrorPresenter & JSXBase.HTMLAttributes<HTMLIonxFormTooltipErrorPresenterElement>;
            "ionx-lazy-load": LocalJSX.IonxLazyLoad & JSXBase.HTMLAttributes<HTMLIonxLazyLoadElement>;
            "ionx-loading": LocalJSX.IonxLoading & JSXBase.HTMLAttributes<HTMLIonxLoadingElement>;
            "ionx-masonry-grid": LocalJSX.IonxMasonryGrid & JSXBase.HTMLAttributes<HTMLIonxMasonryGridElement>;
            "ionx-select": LocalJSX.IonxSelect & JSXBase.HTMLAttributes<HTMLIonxSelectElement>;
            "ionx-select-orderable": LocalJSX.IonxSelectOrderable & JSXBase.HTMLAttributes<HTMLIonxSelectOrderableElement>;
            "ionx-select-overlay": LocalJSX.IonxSelectOverlay & JSXBase.HTMLAttributes<HTMLIonxSelectOverlayElement>;
            "ionx-tags-input": LocalJSX.IonxTagsInput & JSXBase.HTMLAttributes<HTMLIonxTagsInputElement>;
            "ionx-test-dialog": LocalJSX.IonxTestDialog & JSXBase.HTMLAttributes<HTMLIonxTestDialogElement>;
            "ionx-test-dialog-content": LocalJSX.IonxTestDialogContent & JSXBase.HTMLAttributes<HTMLIonxTestDialogContentElement>;
            "ionx-test-dialog-message": LocalJSX.IonxTestDialogMessage & JSXBase.HTMLAttributes<HTMLIonxTestDialogMessageElement>;
            "ionx-test-expanding-searchbar": LocalJSX.IonxTestExpandingSearchbar & JSXBase.HTMLAttributes<HTMLIonxTestExpandingSearchbarElement>;
            "ionx-test-form": LocalJSX.IonxTestForm & JSXBase.HTMLAttributes<HTMLIonxTestFormElement>;
            "ionx-test-home": LocalJSX.IonxTestHome & JSXBase.HTMLAttributes<HTMLIonxTestHomeElement>;
            "ionx-test-lazy-load": LocalJSX.IonxTestLazyLoad & JSXBase.HTMLAttributes<HTMLIonxTestLazyLoadElement>;
            "ionx-test-loading": LocalJSX.IonxTestLoading & JSXBase.HTMLAttributes<HTMLIonxTestLoadingElement>;
            "ionx-test-masonry-grid": LocalJSX.IonxTestMasonryGrid & JSXBase.HTMLAttributes<HTMLIonxTestMasonryGridElement>;
            "ionx-test-root": LocalJSX.IonxTestRoot & JSXBase.HTMLAttributes<HTMLIonxTestRootElement>;
            "ionx-test-select": LocalJSX.IonxTestSelect & JSXBase.HTMLAttributes<HTMLIonxTestSelectElement>;
            "ionx-test-tags-input": LocalJSX.IonxTestTagsInput & JSXBase.HTMLAttributes<HTMLIonxTestTagsInputElement>;
            "ionx-toggle-labels": LocalJSX.IonxToggleLabels & JSXBase.HTMLAttributes<HTMLIonxToggleLabelsElement>;
        }
    }
}
