/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TimeZoneDate } from "@co.mmons/js-utils/core";
import { StyleEventDetail } from "@ionic/core";
export namespace Components {
    interface IonxDateTime {
        /**
          * @inheritDoc
         */
        "clearButtonIcon": string;
        /**
          * @inheritDoc
         */
        "clearButtonText": string;
        /**
          * @inheritDoc
         */
        "clearButtonVisible": boolean;
        /**
          * @inheritDoc
         */
        "dateOnly": boolean;
        /**
          * Timezone, that will be set, when new value is picked from picker. By default  time zone of current device will be used.
          * @inheritDoc
         */
        "defaultTimeZone": string | "current";
        /**
          * @inheritDoc
         */
        "disabled": boolean;
        /**
          * @inheritDoc
         */
        "formatOptions": Intl.DateTimeFormatOptions;
        "open": (event?: any) => Promise<void>;
        /**
          * @inheritDoc
         */
        "placeholder": string;
        /**
          * @inheritDoc
         */
        "readonly": boolean;
        "setBlur": () => Promise<void>;
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Whether timezone cannot be changed.
          * @inheritDoc
         */
        "timeZoneDisabled": boolean;
        /**
          * If time zone must be chosen, by default true.
          * @inheritDoc
         */
        "timeZoneRequired": boolean;
        /**
          * @inheritDoc
         */
        "value": TimeZoneDate;
    }
    interface IonxDateTimeOverlay {
        "dateOnly": boolean;
        "timeZoneDisabled": boolean;
        "timeZoneRequired": boolean;
        "value": TimeZoneDate;
    }
    interface IonxTest {
    }
}
declare global {
    interface HTMLIonxDateTimeElement extends Components.IonxDateTime, HTMLStencilElement {
    }
    var HTMLIonxDateTimeElement: {
        prototype: HTMLIonxDateTimeElement;
        new (): HTMLIonxDateTimeElement;
    };
    interface HTMLIonxDateTimeOverlayElement extends Components.IonxDateTimeOverlay, HTMLStencilElement {
    }
    var HTMLIonxDateTimeOverlayElement: {
        prototype: HTMLIonxDateTimeOverlayElement;
        new (): HTMLIonxDateTimeOverlayElement;
    };
    interface HTMLIonxTestElement extends Components.IonxTest, HTMLStencilElement {
    }
    var HTMLIonxTestElement: {
        prototype: HTMLIonxTestElement;
        new (): HTMLIonxTestElement;
    };
    interface HTMLElementTagNameMap {
        "ionx-date-time": HTMLIonxDateTimeElement;
        "ionx-date-time-overlay": HTMLIonxDateTimeOverlayElement;
        "ionx-test": HTMLIonxTestElement;
    }
}
declare namespace LocalJSX {
    interface IonxDateTime {
        /**
          * @inheritDoc
         */
        "clearButtonIcon"?: string;
        /**
          * @inheritDoc
         */
        "clearButtonText"?: string;
        /**
          * @inheritDoc
         */
        "clearButtonVisible"?: boolean;
        /**
          * @inheritDoc
         */
        "dateOnly"?: boolean;
        /**
          * Timezone, that will be set, when new value is picked from picker. By default  time zone of current device will be used.
          * @inheritDoc
         */
        "defaultTimeZone"?: string | "current";
        /**
          * @inheritDoc
         */
        "disabled"?: boolean;
        /**
          * @inheritDoc
         */
        "formatOptions"?: Intl.DateTimeFormatOptions;
        "onIonChange"?: (event: CustomEvent<any>) => void;
        "onIonFocus"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the styles change.
         */
        "onIonStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * @inheritDoc
         */
        "placeholder"?: string;
        /**
          * @inheritDoc
         */
        "readonly"?: boolean;
        /**
          * Whether timezone cannot be changed.
          * @inheritDoc
         */
        "timeZoneDisabled"?: boolean;
        /**
          * If time zone must be chosen, by default true.
          * @inheritDoc
         */
        "timeZoneRequired"?: boolean;
        /**
          * @inheritDoc
         */
        "value"?: TimeZoneDate;
    }
    interface IonxDateTimeOverlay {
        "dateOnly"?: boolean;
        "timeZoneDisabled"?: boolean;
        "timeZoneRequired"?: boolean;
        "value"?: TimeZoneDate;
    }
    interface IonxTest {
    }
    interface IntrinsicElements {
        "ionx-date-time": IonxDateTime;
        "ionx-date-time-overlay": IonxDateTimeOverlay;
        "ionx-test": IonxTest;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ionx-date-time": LocalJSX.IonxDateTime & JSXBase.HTMLAttributes<HTMLIonxDateTimeElement>;
            "ionx-date-time-overlay": LocalJSX.IonxDateTimeOverlay & JSXBase.HTMLAttributes<HTMLIonxDateTimeOverlayElement>;
            "ionx-test": LocalJSX.IonxTest & JSXBase.HTMLAttributes<HTMLIonxTestElement>;
        }
    }
}
